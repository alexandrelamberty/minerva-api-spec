openapi: 3.1.0
x-stoplight:
  id: rwz6p3832b96k
info:
  title: Minerva
  description: Training Management System
  contact:
    name: Alexandre Lamberty
    email: mail@alexandrelamberty.com
    url: "https://alexandrelamberty.com"
  license:
    name: MIT License
    url: "https://opensource.org/licenses/MIT"
  version: 0.0.1
servers:
  - url: "https://dev.api.hortus.lan"
    description: Development server
  - url: "https://staging.api.hortus.lan"
    description: Staging server
  - url: "https://api.minerva.eevos.com"
    description: Production server
tags:
  - name: Auth
    description: Endpoints for authentication-related operations
  - name: Category
    description: Endpoints for category-related operations
  - name: Training
    description: Endpoints for training-related operations
  - name: Course
    description: Endpoints for course-related operations
  - name: Course Date
    description: Endpoints for course-date-related operations
  - name: Course Material
    description: Endpoints for course-material-related operations
  - name: Student
    description: Endpoints for student-related operations
  - name: Teacher
    description: Endpoints for teacher-related operations
  - name: User
    description: Endpoints for user-related operations
paths:
  /auth/register:
    parameters: []
    post:
      summary: Register a user
      tags:
        - Auth
      operationId: post-auth-register
      responses:
        "200":
          description: OK
      description: Register a user in the system.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: {}
  /auth/login:
    post:
      summary: Login User
      tags:
        - Auth
      operationId: post-auth-login
      responses:
        "200":
          $ref: "#/components/responses/LoginSuccess"
      description: Authenticate a user.
  /auth/logout:
    get:
      summary: Log out the user
      tags:
        - Auth
      responses:
        "200":
          description: Logout Success
      operationId: get-auth-logout
      description: Log-out a user from the system.
    parameters: []
  /auth/recover:
    get:
      summary: Resets user account password
      tags:
        - Auth
      responses:
        "200":
          description: Reset Mail Send Success
      operationId: get-auth-recover
      description: Send an email to reset the password for a user account.
    parameters: []
  /auth/whoami:
    get:
      summary: Retrieves user details
      tags:
        - Auth
      responses:
        "200":
          description: OK
      operationId: get-auth-login
      description: Return informations about the authenticated user.
      requestBody:
        content: {}
    parameters: []
  /categories:
    get:
      summary: Retrieves categories
      tags:
        - Category
      responses:
        "200":
          description: OK
          content: {}
      operationId: get-categories
      description: Get all categories with pagination.
    post:
      summary: Creates category
      tags:
        - Category
      operationId: post-categories
      responses:
        "200":
          description: OK
      requestBody:
        $ref: "#/components/requestBodies/CreateCategory"
      description: Create category with the provided data.
  "/categories/{categoryId}":
    parameters:
      - schema:
          type: string
        name: categoryId
        in: path
        required: true
        description: The ID of the category to perform action on.
    get:
      summary: Retrieves category with provided ID.
      tags:
        - Category
      responses:
        "200":
          description: OK
      operationId: get-categories-categoryId
      description: Get a category by its ID.
    patch:
      summary: Updates category with provided ID.
      tags:
        - Category
      operationId: patch-categories-categoryId
      responses:
        "200":
          description: OK
      description: Updates category by ID with the provided data.
    delete:
      summary: Deletes category with provided ID.
      tags:
        - Category
      operationId: delete-categories-categoryId
      responses:
        "200":
          description: OK
      description: Deletes category by ID.
  /trainings:
    get:
      summary: Retrieves trainings
      tags:
        - Training
      responses:
        "200":
          description: OK
      operationId: get-trainings
      parameters: []
      description: Get all trainings with pagination.
    post:
      summary: Creates training
      tags:
        - Training
      operationId: post-trainings
      responses:
        "200":
          description: OK
      description: Create training with the provided data.
  "/trainings/{trainingId}":
    parameters:
      - schema:
          type: string
        name: trainingId
        in: path
        required: true
        description: The ID of the training to perform action on.
    get:
      summary: Retrieves training with provided ID.
      tags:
        - Training
      responses:
        "200":
          description: OK
      operationId: get-training-trainingId
      description: Retrieves training information.
    patch:
      summary: Updates training with provided ID.
      tags:
        - Training
      operationId: patch-trainings-trainingId
      responses:
        "200":
          description: OK
      description: Updates training by ID with the provided data.
    delete:
      summary: Deletes training with provided ID.
      tags:
        - Training
      operationId: delete-trainings-trainingId
      description: Deletes training.
      responses:
        "200":
          description: OK
  /courses:
    get:
      summary: Retrieves courses
      tags:
        - Course
      responses:
        "200":
          description: OK
      operationId: get-courses
      description: Gets all courses with pagination.
    post:
      summary: Creates course
      tags:
        - Course
      operationId: post-courses
      responses:
        "200":
          description: OK
      description: Create course with provided data.
  "/courses/{courseId}":
    parameters:
      - schema:
          type: string
        name: courseId
        in: path
        required: true
        description: The ID of the course to perform action on.
    get:
      summary: Retrieves course with provided ID.
      tags:
        - Course
      responses:
        "200":
          description: OK
      operationId: get-courses-courseId
      description: Gets course by ID.
    patch:
      summary: Updates course with provided ID.
      tags:
        - Course
      operationId: patch-courses-courseId
      responses:
        "200":
          description: OK
      description: Update a course by its ID with the provided data.
    delete:
      summary: Deletes course with provided ID.
      tags:
        - Course
      operationId: delete-courses-courseId
      responses:
        "200":
          description: OK
      description: Deletes course by ID.
  "/courses/{courseId}/dates":
    parameters:
      - schema:
          type: string
        name: courseId
        in: path
        required: true
        description: The ID of the course to perform action on.
    get:
      summary: Retrieves course dates for course with provided ID.
      tags:
        - Course
      responses:
        "200":
          description: OK
      operationId: get-courses-courseId-dates
      description: Retrieve a list of CourseDate for the course with the provided by ID
    post:
      summary: Creates course date for course with provided ID.
      tags:
        - Course
      operationId: post-courses-courseId-dates
      responses:
        "200":
          description: OK
      description: Create course date with provided data.
  "/courses/{courseId}/dates/{courseDateId}":
    parameters:
      - schema:
          type: string
        name: courseId
        in: path
        required: true
        description: The ID of the course to perform action on.
      - schema:
          type: string
        name: courseDateId
        in: path
        required: true
        description: The ID of the course date to perform action on.
    patch:
      summary: Update course date
      tags:
        - Course
      operationId: patch-courses-courseId-dates-courseDateId
      responses:
        "200":
          description: OK
      description: Updates course date by ID with the provided data.
    delete:
      summary: Delete course date
      tags:
        - Course
      operationId: delete-courses-courseId-dates-courseDateId
      description: Deletes a course date.
      responses:
        "200":
          description: OK
  "/courses/{courseId}/materials":
    parameters:
      - schema:
          type: string
        name: courseId
        in: path
        required: true
        description: The ID of the course to perform action on.
    get:
      summary: Retrieves course materials for course with provided ID.
      tags:
        - Course
      responses:
        "200":
          description: OK
      operationId: get-courses-courseId-materials
      description: "Get all course material "
    post:
      summary: Creates course material for course with provided ID.
      tags:
        - Course
      operationId: post-courses-courseId-materials
      responses:
        "200":
          description: OK
      description: Create course material with the provided data.
  "/courses/{courseId}/materials/{materialId}":
    parameters:
      - schema:
          type: string
        name: courseId
        in: path
        required: true
        description: The ID of the course to perform action on.
      - schema:
          type: string
        name: materialId
        in: path
        required: true
        description: The ID of the course material to perform action on.
    patch:
      summary: Update course material with provided ID.
      tags:
        - Course
      operationId: patch-courses-courseId-materials-materialId
      responses:
        "200":
          description: OK
      description: Updates course material by ID with provided data.
    delete:
      summary: Delete course material with provided ID.
      tags:
        - Course
      operationId: delete-courses-courseId-materials-materialId
      responses:
        "200":
          description: OK
      description: Deletes course material by ID
  /materials:
    get:
      summary: Retrieves course materials
      tags:
        - Course Material
      responses:
        "200":
          description: OK
      operationId: get-materials
      description: Retrieves a paginated list of course materials
    parameters: []
  /dates:
    get:
      summary: Retrieves Course Dates
      tags:
        - Course Date
      responses:
        "200":
          description: OK
      operationId: get-course-dates
      description: Retrieves a paginated list of course dates.
    parameters: []
  /students:
    get:
      summary: Retrieves students
      tags:
        - Student
      responses:
        "200":
          description: OK
      operationId: get-students
      description: Create a student with the provided data.
    parameters: []
    post:
      summary: Creates student
      tags:
        - Student
      operationId: post-students
      responses:
        "200":
          description: OK
      description: Create student with provided data.
  "/students/{studentId}":
    get:
      summary: Retrieves student with provided ID.
      tags:
        - Student
      responses:
        "200":
          description: OK
      operationId: get-students-studentId
      description: Retrieves student with provided ID.
    parameters:
      - schema:
          type: string
        name: studentId
        in: path
        required: true
        description: The ID of the student to perform action on.
    patch:
      summary: Updates user with provided ID.
      tags:
        - Student
      operationId: patch-students-studentId
      responses:
        "200":
          description: OK
      description: Updates stuendet by ID with provided data.
    delete:
      summary: Deletes user with provided ID.
      tags:
        - Student
      operationId: delete-students-studentId
      responses:
        "200":
          description: OK
      description: Retrieves a paginated list of teachers.
  /teachers:
    get:
      summary: Retrieves teachers
      tags:
        - Teacher
      responses:
        "200":
          description: OK
      operationId: get-teachers
      description: Retrieves a paginated list of teachers.
    parameters: []
    post:
      summary: Creates teacher
      tags:
        - Teacher
      operationId: post-teachers
      responses:
        "200":
          description: OK
      description: Create teacher with provided data.
  "/teachers/{teacherId}":
    get:
      summary: Retrieves teacher with provided ID.
      tags:
        - Teacher
      responses:
        "200":
          description: OK
      operationId: get-teachers-teacherId
      description: Updates teacher by ID with provided data.
    parameters:
      - schema:
          type: string
        name: teacherId
        in: path
        required: true
        description: The ID of the teacher to perform action on.
    patch:
      summary: Updates teacher with provided ID.
      tags:
        - Teacher
      operationId: patch-teachers-teacherId
      responses:
        "200":
          description: OK
      description: Updates teacher by ID with provided data.
    delete:
      summary: Delete teacher with provided ID.
      tags:
        - Teacher
      operationId: delete-teachers-teacherId
      responses:
        "200":
          description: OK
      description: Deletes tracher by ID.
  /users:
    post:
      summary: Creates user
      tags:
        - User
      operationId: post-user
      responses:
        "200":
          description: User Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
              examples:
                New User Bob Fellow:
                  value:
                    id: 12
                    firstName: Bob
                    lastName: Fellow
                    email: bob.fellow@gmail.com
                    dateOfBirth: "1996-08-24"
                    emailVerified: false
                    createDate: "2020-11-18"
        "400":
          description: Missing Required Information
        "409":
          description: Email Already Taken
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                dateOfBirth:
                  type: string
                  format: date
              required:
                - firstName
                - lastName
                - email
                - dateOfBirth
            examples:
              Create User Bob Fellow:
                value:
                  firstName: Bob
                  lastName: Fellow
                  email: bob.fellow@gmail.com
                  dateOfBirth: "1996-08-24"
        description: Post the necessary fields for the API to create a new user.
      description: Create user with provided data.
    parameters: []
    get:
      summary: Retrieves users
      tags:
        - User
      operationId: get-users
      responses:
        "200":
          description: OK
      description: Return a paginated list of users.
  "/users/{userId}":
    parameters:
      - schema:
          type: integer
        name: userId
        in: path
        required: true
        description: The ID of the user to perform action on.
    get:
      summary: Retrieves user with provided ID.
      tags:
        - User
      responses:
        "200":
          description: User Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
              examples:
                Get User Alice Smith:
                  value:
                    id: 142
                    firstName: Alice
                    lastName: Smith
                    email: alice.smith@gmail.com
                    dateOfBirth: "1997-10-31"
                    emailVerified: true
                    signUpDate: "2019-08-24"
        "404":
          description: User Not Found
      operationId: get-users-userId
      description: Returns user information by ID.
    patch:
      summary: Updates user with provided ID.
      tags:
        - User
      operationId: patch-users-userId
      responses:
        "200":
          description: User Updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
              examples:
                Updated User Rebecca Baker:
                  value:
                    id: 13
                    firstName: Rebecca
                    lastName: Baker
                    email: rebecca@gmail.com
                    dateOfBirth: "1985-10-02"
                    emailVerified: false
                    createDate: "2019-08-24"
        "404":
          description: User Not Found
        "409":
          description: Email Already Taken
      description: Updates user by ID with provided data.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                  description: "If a new email is given, the user's email verified property will be set to false."
                dateOfBirth:
                  type: string
            examples:
              Update First Name:
                value:
                  firstName: Rebecca
              Update Email:
                value:
                  email: rebecca@gmail.com
              Update Last Name & Date of Birth:
                value:
                  lastName: Baker
                  dateOfBirth: "1985-10-02"
        description: Patch user properties to update.
    delete:
      summary: Delete user with provided ID.
      tags:
        - Student
      operationId: delete-users-userId
      responses:
        "200":
          description: OK
      description: Deletes user by ID.
components:
  schemas:
    Training:
      title: Training
      x-stoplight:
        id: epopmedw05ton
      type: object
      description: "The Training model represents a training within the system, encapsulating various attributes and associated data. "
      properties:
        id:
          type: string
        name:
          type: string
          x-stoplight:
            id: lmf6r8y3t13ml
        description:
          type: string
          x-stoplight:
            id: ux2u2b9jmxyxj
        cover:
          type: string
          x-stoplight:
            id: 1fhda1taszozg
        students:
          type: string
          x-stoplight:
            id: ux8j3gothw688
      required:
        - id
        - name
    TrainingCategory:
      title: TrainingCategory
      x-stoplight:
        id: 7lka3qfu5c9jc
      type: object
      description: "The TrainingCategory model represents a training category within the system, encapsulating various attributes and associated data. "
      properties:
        id:
          type: string
        name:
          type: string
          x-stoplight:
            id: m2vx6mr49mbkr
        description:
          type: string
          x-stoplight:
            id: pebfpm88u6dk7
      required:
        - id
        - name
    Course:
      title: Course
      x-stoplight:
        id: mirzo95ncdowy
      type: object
      description: "The Course model represents a course within the system, encapsulating various attributes and associated data."
      properties:
        id:
          type: string
        name:
          type: string
          x-stoplight:
            id: c3t40lh6jo3pu
        description:
          type: string
          x-stoplight:
            id: l0vk39cspxcfb
        cover:
          type: string
          x-stoplight:
            id: dwbmi8sjybdp4
        teacher:
          $ref: "#/components/schemas/Teacher"
          x-stoplight:
            id: nulwmp1n22cj6
        dates:
          type: array
          x-stoplight:
            id: su93mvq5rtvle
          items:
            $ref: "#/components/schemas/CourseDate"
            x-stoplight:
              id: lsdram5l6ailc
        materials:
          type: array
          x-stoplight:
            id: rhjql0i0lknw2
          items:
            $ref: "#/components/schemas/CourseMaterial"
            x-stoplight:
              id: 9a1qawbwgtr7b
      required:
        - id
        - name
    CourseDate:
      title: CourseDate
      x-stoplight:
        id: asg0lnfj7j7lv
      type: object
      description: "The CourseDate model represents a course date within the system, encapsulating various attributes and associated data. "
      properties:
        id:
          type: string
        date:
          type: string
          x-stoplight:
            id: f9d97d4f5l2az
        course:
          $ref: "#/components/schemas/Course"
          x-stoplight:
            id: sulkr5ibgb2m9
        teacher:
          $ref: "#/components/schemas/Teacher"
          x-stoplight:
            id: wmwz61a41sokc
        attendances:
          type: array
          x-stoplight:
            id: y5vy8c7gg93hc
          items:
            $ref: "#/components/schemas/CourseDateAttendance"
            x-stoplight:
              id: w15imnw1ho8dg
    CourseDateAttendance:
      title: CourseDateAttendance
      x-stoplight:
        id: 6mncd0ml7fad2
      type: object
      description: "The CourseDateAttendance model represents a course date attendance within the system, encapsulating various attributes and associated data. "
      properties:
        id:
          type: string
        course:
          $ref: "#/components/schemas/Course"
          x-stoplight:
            id: 8kr0nrj0ulued
        date:
          $ref: "#/components/schemas/CourseDate"
          x-stoplight:
            id: wm2nkjactkkei
        student:
          $ref: "#/components/schemas/Student"
          x-stoplight:
            id: 9egsshubs00ma
    CourseMaterial:
      title: CourseMaterial
      x-stoplight:
        id: rut2yo5az3ckw
      type: object
      properties:
        id:
          type: string
        name:
          type: string
          x-stoplight:
            id: 3hnicl12vd675
        file:
          type: string
          x-stoplight:
            id: 09rkk73v01qch
      description: "The CourseMaterial model represents a course material within the system, encapsulating various attributes and associated data. "
    User:
      title: User
      type: object
      examples:
        - id: 142
          firstName: Alice
          lastName: Smith
          email: alice.smith@gmail.com
          dateOfBirth: "1997-10-31"
          emailVerified: true
          signUpDate: "2019-08-24"
      properties:
        id:
          type: integer
          description: Unique identifier for the given user.
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        dateOfBirth:
          type: string
          format: date
          example: "1997-10-31"
        emailVerified:
          type: boolean
          description: Set to true if the user's email has been verified.
        createDate:
          type: string
          format: date
          description: The date that the user was created.
        role:
          type: string
          x-stoplight:
            id: k4ausnkqf3wd7
      required:
        - id
        - firstName
        - lastName
        - email
        - emailVerified
      description: "The User model represents a user within the system, encapsulating various attributes and associated data. "
    Student:
      title: Student
      x-stoplight:
        id: j22m22ow21str
      type: object
      description: "The Student model represents a student within the system, encapsulating various attributes and associated data. "
      properties:
        id:
          type: string
          x-stoplight:
            id: w90h977b5nsux
        identifiaction:
          type: string
          x-stoplight:
            id: nut6wzw4663r6
        user:
          $ref: "#/components/schemas/User"
          x-stoplight:
            id: w2015lq4l023o
        trainings:
          type: string
          x-stoplight:
            id: otiq3ldx7tv6s
    Teacher:
      title: Teacher
      x-stoplight:
        id: n7r2zv7s8y8tz
      type: object
      description: "The Teacher model represents a teacher within the system, encapsulating various attributes and associated data. "
      properties:
        id:
          type: string
          x-stoplight:
            id: zyfh8jkgj0b4c
        company:
          type: string
          x-stoplight:
            id: ep9adech3ja08
        user:
          $ref: "#/components/schemas/User"
          x-stoplight:
            id: f5n3bndd6gwl2
        trainings:
          type: string
          x-stoplight:
            id: b3akg2gduoo2r
        courses:
          type: string
          x-stoplight:
            id: l3l54r5gs5nnp
  requestBodies:
    CreateCategory:
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                x-stoplight:
                  id: tpngcthr29zil
              description:
                type: string
                x-stoplight:
                  id: mmzzuz2vjdd7q
            required:
              - name
              - description
      description: JSON object that provide the necessary informations for creating a category.
    CreateTraining:
      content:
        application/json:
          schema:
            type: object
      description: JSON object that provide the necessary informations for creating a training.
    CreateCourse:
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                x-stoplight:
                  id: aovu343asrnw6
              description:
                type: string
                x-stoplight:
                  id: fxh0nug520un3
            required:
              - name
              - description
      description: JSON object that provide the necessary informations for creating a course.
    CreateCourseDate:
      content:
        application/json:
          schema:
            type: object
            properties:
              date:
                type: string
                x-stoplight:
                  id: 17t4c7ctno82o
              teacherId:
                type: string
                x-stoplight:
                  id: di7u13qhfpvy5
            required:
              - date
              - teacherId
      description: JSON object that provide the necessary informations for creating a course date.
    CreateCourseMaterial:
      content:
        multipart/form-data:
          schema:
            type: object
            properties:
              name:
                type: string
                x-stoplight:
                  id: 776r8gcc9i1st
              description:
                type: string
                x-stoplight:
                  id: p28a0pkipd58o
              file:
                type: string
                x-stoplight:
                  id: dy3hemyydpcim
            required:
              - name
              - description
              - file
      description: JSON object that provide the necessary informations for creating a course material.
    LoginUser:
      content:
        application/json:
          schema:
            type: object
      description: JSON object that provide the necessary informations for login a user.
    RegisterUser:
      content:
        application/json:
          schema:
            type: object
            properties:
              "":
                type: string
                x-stoplight:
                  id: aa8d749qv6y9k
      description: JSON object that provide the necessary informations for registering a user.
    InviteTeacher:
      content:
        application/json:
          schema:
            type: object
      description: JSON object that provide the necessary informations for inviting a teacher.
    RegisterStudent:
      content:
        application/json:
          schema:
            type: object
      description: JSON object that provide the necessary informations for registering a student.
    InviteStudent:
      content:
        application/json:
          schema:
            type: object
      description: JSON object that provide the necessary informations for inviting a student.
    RegisterTeacher:
      content:
        application/json:
          schema:
            type: object
      description: JSON object that provide the necessary informations for registering a teacher.
  responses:
    LoginSuccess:
      description: Example response
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: string
    DeleteSuccess:
      description: The DeleteSuccess response confirms the successful deletion of a resource in the system.
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                x-stoplight:
                  id: iuz4r7k33tfdn
              statusCode:
                type: number
                x-stoplight:
                  id: f8ntbssibwyxi
            required:
              - message
              - statusCode
    UpdateCategorySuccess:
      description: Example response
      content:
        application/json:
          schema:
            properties:
              id:
                type: string
    UpdateTrainingSuccess:
      description: Example response
      content:
        application/json:
          schema:
            properties:
              id:
                type: string
    UpdateCourseSuccess:
      description: Example response
      content:
        application/json:
          schema:
            properties:
              id:
                type: string
